{"version":3,"sources":["twitter.svg","github.svg","linkedin.svg","List.js","Done.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","List","state","ableToEdit","emptyNotes","event","_this","target","textContent","setState","react_default","a","createElement","this","props","item","value","onClick","doneItem","className","toRemove","Component","Done","unDoneItem","moment","require","App","list","done","addItem","newItem","addToList","preventDefault","trim","alert","push","toRemoveList","console","log","removedItem","indexOf","splice","forceUpdate","toRemoveDone","removeAll","removeDone","tick","element","format","ReactDOM","render","document","getElementById","_this2","setInterval","listItems","map","src_List","editTasks","doneItems","src_Done","onSubmit","type","name","onChange","id","href","src","twitter","alt","github","linkedin","Boolean","window","location","hostname","match","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qOCkCzBC,oNA9BXC,MAAQ,CACJC,YAAa,KAIjBC,WAAa,SAACC,IACmB,IAA1BC,EAAKJ,MAAMC,aACVE,EAAME,OAAOC,YAAa,GAC1BF,EAAKG,SAAS,CACVN,YAAa,8EAOzB,OACEO,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACMF,EAAAC,EAAAC,cAAA,UAAMC,KAAKC,MAAMC,MAEjBL,EAAAC,EAAAC,cAAA,UAAQI,MAAOH,KAAKC,MAAMC,KAAME,QAASJ,KAAKC,MAAMI,SAAUC,UAAU,cAAxE,UACAT,EAAAC,EAAAC,cAAA,UAAQI,MAAOH,KAAKC,MAAMC,KAAME,QAASJ,KAAKC,MAAMM,SAAUD,UAAU,cAAxE,cAvBGE,cCeJC,mLAZX,OACEZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIO,UAAU,kBAAkBN,KAAKC,MAAMC,MAC3CL,EAAAC,EAAAC,cAAA,UAAQI,MAAOH,KAAKC,MAAMC,KAAME,QAASJ,KAAKC,MAAMM,SAAUD,UAAU,cAAxE,KACAT,EAAAC,EAAAC,cAAA,UAAQI,MAAOH,KAAKC,MAAMC,KAAME,QAASJ,KAAKC,MAAMS,WAAYJ,UAAU,cAA1E,mBARKE,8DCMfG,EAASC,EAAQ,IAqKNC,6MAjKbxB,MAAQ,CACNa,KAAO,GACPY,KAAO,GACPC,KAAO,MAGTC,QAAS,SAACxB,GAER,IAAIyB,EAAUzB,EAAME,OAAOS,MAE3BV,EAAKG,SAAS,CACVM,KAAOe,OAIbC,UAAY,SAAC1B,GAEXA,EAAM2B,iBAEwB,KAA3B1B,EAAKJ,MAAMa,KAAKkB,OACjBC,MAAM,gCAGL5B,EAAKJ,MAAMyB,KAAKQ,KAAK7B,EAAKJ,MAAMa,MAEhCT,EAAKG,SAAS,CACVM,KAAM,SAMfqB,aAAe,SAAC/B,GACdgC,QAAQC,IAAIhC,EAAKJ,MAAMyB,MAEvB,IAAIY,EAAcjC,EAAKJ,MAAMyB,KAAKa,QAAQnC,EAAME,OAAOS,OACvDqB,QAAQC,IAAIC,GAEZjC,EAAKJ,MAAMyB,KAAKc,OAAOF,EAAY,GAEnCjC,EAAKoC,iBAGPC,aAAe,SAACtC,GAEd,IAAIkC,EAAcjC,EAAKJ,MAAM0B,KAAKY,QAAQnC,EAAME,OAAOS,OAEvDV,EAAKJ,MAAM0B,KAAKa,OAAOF,EAAY,GAEnCjC,EAAKoC,iBAGPxB,SAAW,SAACb,GAEV,IAAIa,EAAWb,EAAME,OAAOS,MAE5BV,EAAKJ,MAAM0B,KAAKO,KAAKjB,GAErBZ,EAAKJ,MAAMyB,KAAKc,OAAOnC,EAAKJ,MAAMyB,KAAKa,QAAQtB,GAAU,GAEzDZ,EAAKoC,iBAGPnB,WAAa,SAAClB,GAEZ,IAAIkB,EAAalB,EAAME,OAAOS,MAE9BV,EAAKJ,MAAMyB,KAAKQ,KAAKZ,GAErBjB,EAAKJ,MAAM0B,KAAKa,OAAOnC,EAAKJ,MAAM0B,KAAKY,QAAQjB,GAAY,GAE3DjB,EAAKoC,iBAGPE,UAAY,SAACvC,GAEXA,EAAM2B,iBAEN1B,EAAKG,SAAS,CACZkB,KAAM,GACNC,KAAK,KAGPtB,EAAKoC,iBAGPG,WAAa,SAACxC,GAEZA,EAAM2B,iBAEN1B,EAAKG,SAAS,CACZmB,KAAK,KAGPtB,EAAKoC,iBASNI,KAAM,WACL,IAAMC,EAEFrC,EAAAC,EAAAC,cAAA,cAAMY,IAASwB,OAAO,OAAtB,KAGJC,IAASC,OAAOH,EAASI,SAASC,eAAe,uFAI1C,IAAAC,EAAAxC,KAEPyC,YAAYzC,KAAKiC,KAAM,KAEvB,IAAIS,EAAY1C,KAAKX,MAAMyB,KAAK6B,IAAI,SAACzC,GAAD,OAAUL,EAAAC,EAAAC,cAAC6C,EAAD,CAAM1C,KAAMA,EAAMK,SAAUiC,EAAKjB,aAAclB,SAAUmC,EAAKnC,SAAUwC,UAAWL,EAAKK,cAClIC,EAAY9C,KAAKX,MAAM0B,KAAK4B,IAAI,SAACzC,GAAD,OAAUL,EAAAC,EAAAC,cAACgD,EAAD,CAAM7C,KAAMA,EAAMK,SAAUiC,EAAKV,aAAcpB,WAAY8B,EAAK9B,eAC9G,OACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,QAAMiD,SAAUhD,KAAKkB,WACnBrB,EAAAC,EAAAC,cAAA,SAAOkD,KAAK,OAAOC,KAAK,OAAOC,SAAUnD,KAAKgB,QAASb,MAAOH,KAAKX,MAAMa,OACzEL,EAAAC,EAAAC,cAAA,UAAQkD,KAAK,SAAS3C,UAAU,YAAhC,QAEFT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,WACXT,EAAAC,EAAAC,cAAA,UAAQK,QAASJ,KAAKgC,WAAY1B,UAAU,eAA5C,0BACAT,EAAAC,EAAAC,cAAA,UAAQK,QAASJ,KAAK+B,UAAWzB,UAAU,eAA3C,qBAEJT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,aACbT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACXT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,MAAM8C,GAAG,eAI5BvD,EAAAC,EAAAC,cAAA,OAAKO,UAAU,MAAM8C,GAAG,SACtBvD,EAAAC,EAAAC,cAAA,OAAKO,UAAU,aACbT,EAAAC,EAAAC,cAAA,mBACC2C,GAGH7C,EAAAC,EAAAC,cAAA,OAAKO,UAAU,YACbT,EAAAC,EAAAC,cAAA,uBACC+C,KAIPjD,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGsD,KAAK,+BAA8BxD,EAAAC,EAAAC,cAAA,OAAKO,UAAU,YAAWgD,IAAKC,IAASC,IAAI,mBAClF3D,EAAAC,EAAAC,cAAA,KAAGsD,KAAK,+BAA8BxD,EAAAC,EAAAC,cAAA,OAAKO,UAAU,YAAYgD,IAAKG,IAAQD,IAAI,kBAClF3D,EAAAC,EAAAC,cAAA,KAAGsD,KAAK,yDAAwDxD,EAAAC,EAAAC,cAAA,OAAKO,UAAU,YAAYgD,IAAKI,IAAUF,IAAI,8BA3J5GhD,aCCEmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN3B,IAASC,OAAOxC,EAAAC,EAAAC,cAACiE,EAAD,MAAS1B,SAASC,eAAe,SD2H3C,kBAAmB0B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cc72cdd1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter.9547ed0c.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.c7978d43.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.4de961fd.svg\";","import React, { Component } from 'react';\n\n\nclass List extends Component {\n    state = {\n        ableToEdit : false\n    }\n    //this function clear the default text of <p> that is editable , \n    //and only do it once, so if the user wrote notes and they want to edited some more, it won't clear what they already wrote\n    emptyNotes = (event) =>{\n        if(this.state.ableToEdit === false){\n            event.target.textContent ='';\n            this.setState({\n                ableToEdit : true,\n            })\n        }\n        \n       \n    }\n  render() {\n    return (\n      <div>\n          <ul>\n                <li >{this.props.item}</li>\n                {/* <p contentEditable=\"true\" onClick={this.emptyNotes}> click here to write notes</p> */}\n                <button value={this.props.item} onClick={this.props.doneItem} className=\"btn-circle\">✓</button>\n                <button value={this.props.item} onClick={this.props.toRemove} className=\"btn-circle\">X</button>\n          </ul>\n         \n      </div>\n    );\n  }\n}\n\nexport default List;\n\n// to u\n// onClick={()=>this.props.doneItem}","import React, { Component } from 'react';\n\n\nclass Done extends Component {\n    \n  render() {\n    return (\n      <div >\n          <ul>\n              <li className=\"completedTasks\">{this.props.item}</li>\n              <button value={this.props.item} onClick={this.props.toRemove} className=\"btn-circle\" >X</button>\n              <button value={this.props.item} onClick={this.props.unDoneItem} className=\"btn-circle\">↵</button>\n          </ul>\n      </div>\n    );\n  }\n}\n\nexport default Done;\n","import React, { Component } from 'react';\nimport './App.css';\nimport List from './List'\nimport Done from './Done'\nimport ReactDOM from 'react-dom'\nimport twitter from './twitter.svg';\nimport github from './github.svg';\nimport linkedin from './linkedin.svg';\n\nvar moment = require('moment');\n\nclass App extends Component {\n  // the item key is to contain what the user write to add into list key(which is the todolist)\n  state = {\n    item : \"\",\n    list : [],\n    done : [],\n  }\n  //this function to update the item(key) so it can be user later to be added to the list(key) array.\n  addItem= (event) => {\n    // getting what the user is writing \n    let newItem = event.target.value;\n    //updating the value of item(key)\n    this.setState({\n        item : newItem\n    })\n  }\n  //this function to add the item(key) to the array of list(key)\n  addToList = (event) =>{\n    //to prevent the page from reloading once the user uses the button\n    event.preventDefault();\n    // this if condition is to make sure that the user will not be giving us only a whitespace\n    if(this.state.item.trim() === ''){\n      alert(\"you need to write something\")\n    }else{\n       //to push the new item to the array of list\n       this.state.list.push(this.state.item)\n       //to reset the value of item(key), so once the user submit the item it will disapear from the page\n       this.setState({\n           item: \"\"\n       })\n    }\n  }\n  \n  //this function is used by the List.js component to delete/remove any item on the list from the page and from the list array\n  toRemoveList = (event) => {\n    console.log(this.state.list)\n    //this var is to select the wanted element by its content and to find its index on on the list(key) array\n    let removedItem = this.state.list.indexOf(event.target.value);\n    console.log(removedItem)\n    //using .splice method to remove the item from the array\n    this.state.list.splice(removedItem,1)\n    //using this method to force the render methor to render again so the removed item will disapear from the page\n    this.forceUpdate();\n  }\n  //this function is used by Done.js component to delete/remove any completed tasks from the done(key) array\n  toRemoveDone = (event) => {\n    //this var is to select the wanted element by its content and to find its index on on the list(key) array\n    let removedItem = this.state.done.indexOf(event.target.value);\n    //using .splice method to remove the item from the array\n    this.state.done.splice(removedItem,1)\n    //using this method to force the render methor to render again so the removed item will disapear from the page\n    this.forceUpdate();\n  }\n  //this function enables the user to be done with a task \n  doneItem = (event) =>{\n    // to select the done item\n    let doneItem = event.target.value;\n    // to add the item to the done(key) array\n    this.state.done.push(doneItem);\n    // to delete the done item for list(key) array\n    this.state.list.splice(this.state.list.indexOf(doneItem),1)\n    // to call render() again\n    this.forceUpdate();\n  }\n  // this function enables the user to undone a task, and to have it back on the tasks list\n  unDoneItem = (event) =>{\n    // to select the item\n    let unDoneItem = event.target.value;\n    // to update the list(key) array to add the undone item\n    this.state.list.push(unDoneItem);\n    // to update the done(key) array to remove the undone item\n    this.state.done.splice(this.state.done.indexOf(unDoneItem),1)\n    // to call render again so the items on the page will appear correctly\n    this.forceUpdate();\n  }\n  //this function enables the user to remove all the tasks\n  removeAll = (event) =>{\n    //to prevent the button from refreshing the page\n    event.preventDefault();\n    // to reset all values to empty in order to clear all tasks\n    this.setState({\n      list: [],\n      done:[]\n    })\n    //to render again so it shows no tasks\n    this.forceUpdate();\n  }\n  //this function enables the user to remove the tasks that was already done with\n  removeDone = (event) =>{\n    //to prevent the button from refershing again\n    event.preventDefault();\n    //to reset the doneTasks array to empty in order to remove doneTasks\n    this.setState({\n      done:[]\n    })\n    //to render again so the page won't show any doneTasks anymore\n    this.forceUpdate();\n  }\n  // editTasks = (event) =>{\n  //   // this.addItem(event);\n  //   let itemUpdate = this.state.list.indexOf(event.targe);\n  //   console.log(itemUpdate)\n  //   // this.state.list[itemUpdate] = this.state.item;\n  // }\n  // this function is to display the time from moment.js library and to render it everytime is called\n   tick= () =>{\n    const element = (\n\n        <h3> {moment().format('LTS')} </h3>\n\n    );\n    ReactDOM.render(element, document.getElementById('timeTable'));\n  }\n  \n  \n  render() {\n    //this function is to call the tick(time) function every second (1000 stands for milisecond)\n    setInterval(this.tick, 1000)\n    // the var to pass all the lists' item to the List component and to pass the function toRemove so it can be used.\n    let listItems = this.state.list.map((item) => <List item={item} toRemove={this.toRemoveList} doneItem={this.doneItem} editTasks={this.editTasks}/>)\n    let doneItems = this.state.done.map((item) => <Done item={item} toRemove={this.toRemoveDone} unDoneItem={this.unDoneItem}/>)\n    return (\n      <div>\n        <h1 >To Do List </h1>\n        <form onSubmit={this.addToList}>\n          <input type=\"text\" name=\"item\" onChange={this.addItem} value={this.state.item}></input>\n          <button type=\"submit\" className=\"addPress\">Add</button>\n        </form>\n        <div className=\"editing\">\n            <button onClick={this.removeDone} className=\"editButtons\">remove completed tasks</button>\n            <button onClick={this.removeAll} className=\"editButtons\">delete All tasks</button>\n        </div>\n        <div className=\"container\">\n          <div className=\"row\">\n              <div className=\"col\" id=\"timeTable\">\n                 \n              </div>\n          </div>\n          <div className=\"row\" id=\"space\">\n            <div className=\"col tasks\">\n              <h2>Tasks</h2>\n              {listItems}\n            </div>\n            \n            <div className=\"col done\">\n              <h2>Completed</h2>\n              {doneItems}\n            </div>\n          </div>\n        </div>\n        <footer >\n            <span> created by Saud Almutairi  </span>\n            <div>\n                <a href=\"https://twitter.com/saud95t\"><img className=\"contactMe\"src={twitter} alt=\"myTwitterPage\"/></a>\n                <a href=\"https://github.com/saud9030\"><img className=\"contactMe\" src={github} alt=\"myGithubPage\"/></a>\n                <a href=\"https://www.linkedin.com/in/saud-almutairi-74a19b152/\"><img className=\"contactMe\" src={linkedin} alt=\"myLinkedinPage\" /></a>\n            </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n//moment().format('LTS')","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}